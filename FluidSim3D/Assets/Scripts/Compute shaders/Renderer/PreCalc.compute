#pragma kernel CalcTriNormals // 0
#pragma kernel SetLastRotations // 1
#pragma kernel SafeDistancesPass // 2

#include "RendererResources.hlsl"

const uint NumTris;
const uint NumTriObjects;

const uint4 NumChunks;

RWStructuredBuffer<Tri> Tris;
RWStructuredBuffer<TriObject> TriObjects;

RWStructuredBuffer<int> StartIndices;
RWStructuredBuffer<float> SafeDistances;

float3 GetPlaneNormal (float3 a, float3 b, float3 c)
{
    float3 ab = b - a;
    float3 ac = c - a;

    return normalize(cross(ab, ac));
}

bool ValidChunk(int3 chunk)
{
    return chunk.x >= 0 && chunk.x < (int)NumChunks.x &&
           chunk.y >= 0 && chunk.y < (int)NumChunks.y &&
           chunk.z >= 0 && chunk.z < (int)NumChunks.z;
}

uint GetChunkKey(uint3 chunk)
{
    return chunk.x + chunk.y*NumChunks.x + chunk.z*NumChunks.w;
}

[numthreads(TN_PC,1,1)]
void CalcTriNormals (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= NumTris) { return; }

    Tri tri = Tris[i];
    TriObject parent = TriObjects[tri.parentKey];

    if (dot2(parent.rot - parent.lastRot) > 0)
    {
        float3 rotDiff = parent.rot - parent.lastRot;
        ApplyTransformTriVertices(rotDiff, tri.vA, tri.vB, tri.vC);

        tri.normal = GetPlaneNormal(tri.vA, tri.vB, tri.vC);
    }

    tri.normal = GetPlaneNormal(tri.vA, tri.vB, tri.vC);

    Tris[i] = tri;
}

[numthreads(TN_PC,1,1)]
void SetLastRotations (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= NumTriObjects) { return; }

    TriObject triObject = TriObjects[i];

    if (dot2(triObject.rot - triObject.lastRot) > 0)
    {
        TriObjects[i].lastRot = triObject.rot;
    }
}

[numthreads(TN_PC2,TN_PC2,TN_PC2)]
void SafeDistancesPass (uint3 id : SV_DispatchThreadID)
{
    if (!ValidChunk(id)) return;
    uint chunkKey = GetChunkKey(id);

    if (StartIndices[chunkKey] == 0) SafeDistances[chunkKey] = 1.0;
}