#pragma kernel CalculateGridValues // 0
#pragma kernel GenerateMeshData // 1

#include "SimulationResources.hlsl"
#include "CompositionResources.hlsl"

const int MarchW;
const int MarchH;
const int TriStorageLength;
const int ParticlesNum;
const float MSResolution;
const float MSvalMin;

const int MaxInfluenceRadius;
const int2 ChunksNum;
const int Width;
const int Height;

RWStructuredBuffer<float3> Vertices;
RWStructuredBuffer<int> Triangles;
RWStructuredBuffer<float4> Colors;
RWStructuredBuffer<float> MSPoints;

RWStructuredBuffer<int2> SpatialLookup; // [ParticlesNum](particleIndex, ChunkKey)
RWStructuredBuffer<int> StartIndices;

struct PTypeStruct
{
    int FluidSpringsGroup;

    float SpringPlasticity;
    float SpringTolDeformation;
    float SpringStiffness;

    float ThermalConductivity;
    float SpecificHeatCapacity;
    float FreezeThreshold;
    float VaporizeThreshold;

    float Pressure;
    float NearPressure;

    float Mass;
    float TargetDensity;
    float Damping;
    float PassiveDamping;
    float Viscosity;
    float Stickyness;
    float Gravity;

    float InfluenceRadius;
    float colorG;
};
RWStructuredBuffer<PTypeStruct> PTypes;

struct PDataStruct
{
    float2 PredPosition;
    float2 Position;
    float2 Velocity;
    float2 LastVelocity;
    float Density;
    float NearDensity;
    float Temperature; // kelvin
    float TemperatureExchangeBuffer;
    int LastChunkKey_PType_POrder; // composed 3 int structure
    // POrder; // POrder is dynamic,
    // LastChunkKey; // 0 <= LastChunkKey <= ChunkNum
    // PType; // 0 <= PType <= PTypeNum
};
RWStructuredBuffer<PDataStruct> PData;

float LerpNorm(float a, float b)
{
    return lerp1D(0, 1, a, b, MSvalMin);
}

void AddTriangle(int TriangleID, float BaseX, float BaseY, float Scale, int TriIndex, float a, float b, float c, float d)
{
    for (int i = TriIndex; i < TriIndex+3*TriStorageLength; i++)
    {
        Vertices[i] = float3(0.0, 0.0, 0.0);
        Triangles[i] = 0;
    }

    switch (TriangleID)
    {
        case 0: break;
        case 1:
        // z = 5 allows rendering!
            Vertices[TriIndex] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX, BaseY + LerpNorm(a, d) * Scale, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;

            TriIndex += 3;
            break;

        case 2:
            Vertices[TriIndex] = float3(BaseX + Scale, BaseY + LerpNorm(b, c) * Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 3:
            Vertices[TriIndex] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, BaseY + LerpNorm(b, c) * Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, BaseY + LerpNorm(a, d) * Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, BaseY + LerpNorm(b, c) * Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 4:
            Vertices[TriIndex] = float3(BaseX + Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, BaseY + LerpNorm(b, c) * Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 5:
            Vertices[TriIndex] = float3(BaseX + Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, BaseY + LerpNorm(b, c) * Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, BaseY + LerpNorm(a, d) * Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break; // progress 1

        case 6:
            Vertices[TriIndex] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 7:
            Vertices[TriIndex] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, BaseY + LerpNorm(a, d) * Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, BaseY + LerpNorm(a, d) * Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY + Scale, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 8:
            Vertices[TriIndex] = float3(BaseX, BaseY + Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX, BaseY + LerpNorm(a, d) * Scale, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 9:
            Vertices[TriIndex] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 10:
            Vertices[TriIndex] = float3(BaseX, BaseY + LerpNorm(a, d) * Scale, 5);
            Vertices[TriIndex + 1] = float3(BaseX, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX + Scale, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX + Scale, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + LerpNorm(d, c) * Scale, BaseY + Scale, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY + LerpNorm(b, c) * Scale, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 11:
            Vertices[TriIndex] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX + Scale, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(d, c) * Scale, Scale + BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX + LerpNorm(d, c) * Scale, Scale + BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, LerpNorm(b, c) * Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 12:
            Vertices[TriIndex] = float3(BaseX, Scale + BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX, LerpNorm(a, d) * Scale + BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, LerpNorm(a, d) * Scale + BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, LerpNorm(b, c) * Scale + BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 13:
            Vertices[TriIndex] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, Scale + BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, LerpNorm(b, c) * Scale + BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, 0 + BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, LerpNorm(b, c) * Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 14:
            Vertices[TriIndex] = float3(BaseX, Scale + BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, LerpNorm(a, d) * Scale + BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX + LerpNorm(a, b) * Scale, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        case 15:
            Vertices[TriIndex] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX + Scale, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;

            Vertices[TriIndex] = float3(BaseX, BaseY, 5);
            Vertices[TriIndex + 1] = float3(BaseX, Scale + BaseY, 5);
            Vertices[TriIndex + 2] = float3(BaseX + Scale, Scale + BaseY, 5);
            Triangles[TriIndex] = TriIndex;
            Triangles[TriIndex + 1] = TriIndex + 1;
            Triangles[TriIndex + 2] = TriIndex + 2;
            TriIndex += 3;
            break;

        default:
            break;
    }
}

bool ValidChunk(int ChunkX, int ChunkY)
{
    if (ChunkX >= 0 && ChunkX < ChunksNum.x && ChunkY >= 0 && ChunkY < ChunksNum.y) {return true;}
    return false;
}

float CalcPointValue(float2 pos)
{
    // Int type conversion removes decimals, effectively doing a Floor() operation
    int ChunkX = (int)(pos.x / MaxInfluenceRadius);
    int ChunkY = (int)(pos.y / MaxInfluenceRadius);

    float totValue = 0.0;
    for (int x = -2; x <= 2; x++)
    {
        for (int y = -2; y <= 2; y++)
        {
            int CurChunkX = ChunkX + x;
            int CurChunkY = ChunkY + y;
            
            if (!ValidChunk(CurChunkX, CurChunkY)) {continue;}

            int ChunkKey = CurChunkY * ChunksNum.x + CurChunkX;
            int startIndex = StartIndices[ChunkKey];

            int Index = startIndex;
            while (Index < ParticlesNum && ChunkKey == SpatialLookup[Index].y)
            {
                int PIndex = SpatialLookup[Index].x;

                float dst = length(pos - PData[PIndex].Position);

                totValue += SmoothLiquid(dst / 2, MaxInfluenceRadius);

                // Increment Index each iteration - Chunk particle search algorithm
                Index += 1;
            }
        }
    }
    
    return totValue;
}

[numthreads(TN_MS,TN_MS,1)]
void CalculateGridValues (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * MarchW + x;

    float2 pos = float2(float(x) * float(Width) / float(MarchW), float(y) * float(Height) / float(MarchH));
    float val = CalcPointValue(pos);
    if (val > 1)
    {
        val = 1;
    }
    MSPoints[index] = val;
}

[numthreads(TN_MS,TN_MS,1)]
void GenerateMeshData (uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * (MarchW-1) + x;

    int triIndex = 3 * index * TriStorageLength;

    float a = MSPoints[x + y*MarchW];
    float b = MSPoints[x+1 + y*MarchW];
    float c = MSPoints[x+1 + y*MarchW+MarchW];
    float d = MSPoints[x + y*MarchW+MarchW];
    int triKey = int(1*round(a) + 2*round(b) + 4*round(c) + 8*round(d));

    AddTriangle(triKey, (x-MarchW*0.5)*MSResolution/25, (y-MarchH*0.5)*MSResolution/25, MSResolution/25, triIndex, a, b, c, d);
}